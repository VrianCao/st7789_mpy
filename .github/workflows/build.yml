name: Build MicroPython ST7789 Module (All Targets)

on:
  push:
    branches:
      - 'main'
      - 'master'
  workflow_dispatch:
  # Run this comprehensive workflow on pushes to main branches and manual triggers
  # This workflow runs alongside the esp32.yml workflow

permissions:
  contents: read
  actions: read

jobs:
  build-esp32-targets:
    runs-on: ubuntu-latest
    env:
      IDF_VERSION: v5.4
      MICROPYTHON_VERSION: v1.25.0
      BUILD_VERBOSE: 1
    strategy:
      fail-fast: false
      matrix:
        target: [
          "GENERIC-7789",
          "GENERIC_SPIRAM-7789",
          "GENERIC_C3",
          "GENERIC_C3_USB",
          "GENERIC_S2",
          "GENERIC_S3_7789",
          "GENERIC_S3_SPIRAM",
          "GENERIC_S3_SPIRAM_OCT",
          "LOLIN_S2_MINI",
          "M5CORE",
          "M5CORE2",
          "T-DISPLAY-ESP32",
          "T-DONGLE-S3",
          "TWATCH-2020",
          "ESP32_BOX_LITE"
        ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: st7789_mpy

      - name: Clone MicroPython
        run: |
          git clone https://github.com/micropython/micropython.git \
            --branch ${{ env.MICROPYTHON_VERSION }} \
            --depth 1
          cd micropython
          git submodule update --init --recursive --depth 1

      - name: Build mpy-cross
        run: cd micropython/mpy-cross && make

      - name: Determine IDF target
        id: determine_target
        run: |
          if [[ "${{ matrix.target }}" == *"C3"* ]]; then
            echo "idf_target=esp32c3" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.target }}" == *"S2"* ]]; then
            echo "idf_target=esp32s2" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.target }}" == *"S3"* ]]; then
            echo "idf_target=esp32s3" >> $GITHUB_OUTPUT
          else
            echo "idf_target=esp32" >> $GITHUB_OUTPUT
          fi

      - name: Build MicroPython Firmware
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ env.IDF_VERSION }}
          target: ${{ steps.determine_target.outputs.idf_target }}
          path: 'micropython/ports/esp32'
          command: |
            # Create modules directory if it doesn't exist
            mkdir -p modules
            
            # Copy some common font files as frozen modules (optional)
            cp -f ../../../st7789_mpy/fonts/bitmap/vga1_16x16.py modules/ || true
            cp -f ../../../st7789_mpy/fonts/bitmap/vga2_8x8.py modules/ || true
            
            # Build the firmware with the st7789 module
            make BOARD=${{ matrix.target }} USER_C_MODULES=../../../../st7789_mpy/st7789/micropython.cmake

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target }}
          path: micropython/ports/esp32/build-${{ matrix.target }}/firmware.bin

  build-rp2-targets:
    runs-on: ubuntu-latest
    env:
      MICROPYTHON_VERSION: v1.25.0
    strategy:
      fail-fast: false
      matrix:
        target: [
          "RPI_PICO",
          "RPI_PICO_W",
          "PIMORONI_TINY2040"
        ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: st7789_mpy

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential

      - name: Clone MicroPython
        run: |
          git clone https://github.com/micropython/micropython.git \
            --branch ${{ env.MICROPYTHON_VERSION }} \
            --depth 1
          cd micropython
          git submodule update --init --recursive --depth 1

      - name: Build mpy-cross
        run: cd micropython/mpy-cross && make

      - name: Build firmware
        run: |
          cd micropython/ports/rp2
          
          # Create modules directory if it doesn't exist
          mkdir -p modules
          
          # Copy some common font files as frozen modules (optional)
          cp -f ../../../st7789_mpy/fonts/bitmap/vga1_16x16.py modules/ || true
          cp -f ../../../st7789_mpy/fonts/bitmap/vga2_8x8.py modules/ || true
          
          # Build the firmware with the st7789 module
          make BOARD=${{ matrix.target }} USER_C_MODULES=../../../../st7789_mpy/st7789/micropython.cmake

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target }}
          path: micropython/ports/rp2/build-${{ matrix.target }}/firmware.uf2

  build-stm32-targets:
    runs-on: ubuntu-latest
    env:
      MICROPYTHON_VERSION: v1.25.0
    strategy:
      fail-fast: false
      matrix:
        target: [
          "PYBD_SF2"
        ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: st7789_mpy

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential

      - name: Clone MicroPython
        run: |
          git clone https://github.com/micropython/micropython.git \
            --branch ${{ env.MICROPYTHON_VERSION }} \
            --depth 1
          cd micropython
          git submodule update --init --recursive --depth 1

      - name: Build mpy-cross
        run: cd micropython/mpy-cross && make

      - name: Build firmware
        run: |
          cd micropython/ports/stm32
          
          # Create modules directory if it doesn't exist
          mkdir -p modules
          
          # Copy some common font files as frozen modules (optional)
          cp -f ../../../st7789_mpy/fonts/bitmap/vga1_16x16.py modules/ || true
          cp -f ../../../st7789_mpy/fonts/bitmap/vga2_8x8.py modules/ || true
          
          # Build the firmware with the st7789 module
          make BOARD=${{ matrix.target }} USER_C_MODULES=../../../../st7789_mpy/st7789/micropython.cmake

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target }}
          path: micropython/ports/stm32/build-${{ matrix.target }}/firmware.dfu

  create-release:
    needs: [build-esp32-targets, build-rp2-targets, build-stm32-targets]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: firmware

      - name: Generate tag name
        id: tag
        run: |
          TAG_NAME="build-$(date +'%Y%m%d')-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Tag name: $TAG_NAME"

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Automated Build ${{ steps.tag.outputs.tag_name }}
          files: firmware/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  all-in-one-package:
    needs: [build-esp32-targets, build-rp2-targets, build-stm32-targets]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: firmware

      - name: Create all-in-one package
        run: |
          mkdir -p all-firmware
          cp -r firmware/* all-firmware/
          cd all-firmware
          zip -r ../st7789-firmware-all.zip .

      - name: Upload all-in-one package
        uses: actions/upload-artifact@v4
        with:
          name: st7789-firmware-all
          path: st7789-firmware-all.zip
